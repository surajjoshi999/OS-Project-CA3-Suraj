#include<stdio.h>
#include<string.h>
#include<pthread.h>
#include<stdlib.h>
#include<unistd.h>
pthread_t tid[10];
int counter;
pthread_mutex_t lock=PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t con=PTHREAD_COND_INITIALIZER;
struct passenger
{
    int key;
    struct passenger *next;
};
// The queue of passengers
struct Station
{
    struct passenger *front, *rear;
};
struct passenger* newNode()
{
    struct passenger *temp = (struct passenger*)malloc(sizeof(struct passenger));
    temp->next = NULL;
    return temp; 
}
// A utility function to create an empty queue
struct Station * createQueue()
{
    struct Station *q = (struct Station*)malloc(sizeof(struct Station));
    q->front = q->rear = NULL;
    return q;
}
// The function to add a key k to q
void add(struct Station *q)
{
    // Create a new LL node
    struct passenger *temp = newNode();
    if (q->rear == NULL)
    {
       q->front = q->rear = temp;
       return;
    }
    q->rear->next = temp;
    q->rear = temp;
}
struct train
{	int number;
	int seats;
	struct Station *q;
};

struct passenger *load(struct Station *q)
{
    // If queue is empty, return NULL.
    if (q->front == NULL)
       return NULL;
    // Store previous front and move front one node ahead

    struct passenger *temp = q->front;
    q->front = q->front->next;
    // If front becomes NULL, then change rear also as NULL

    if (q->front == NULL)
       q->rear = NULL;
    return temp;
}
void * stationOnBoard(struct train *q)
{
	printf("Passenger Loadeed\n");
    printf("\n Train has been Boarded %d\n",q->number);
    pthread_cond_signal(&con);
}
void* trytrain(void *ar)
{
    pthread_mutex_lock(&lock);
 	struct train *a=(struct train*)ar;
    unsigned long i = 0;
    
 	 printf("%d\n",a->seats);
		printf("\n Train no. %d is on the station waiting for passengers \n",a->number);	 
		pthread_cond_wait(&con,&lock);
		 while(i < a->seats)
	  	{
	  		sleep(1);
		  if(load(a->q) !=NULL)
	  		i++;
	  	}pthread_cond_wait(&con,&lock);
 	 	stationOnBoard(a);
		pthread_mutex_unlock(&lock);
    return NULL;
}
void * stationWaitForTrain(struct Station *q)
{
	add(q);
	printf(" \n passenger on station\n");
}
void * stationLoadTrain(void *a)
{
	trytrain(&a);
}
int main(void)
{
    int i = 0;
    int error;
 	int c;
	int k;
 	struct Station *q = createQueue();
    struct train a;
    a.q=q;
	printf("\t\t\t Indian Rail \t\n");
	if (pthread_mutex_init(&lock, NULL) != 0)
    {
        printf("\n mutex init has failed\n");
        return 1;
	}
	x:
	sleep(1);
  	 printf("\tChoose The Activity :\n 1. Passenger on station \n 2.Train arrived on station \n 3. Exit\n");
   	scanf("%d",&c);
	if(c==1){
		stationWaitForTrain(q);
		}
	else if(c==2)
    	{
	printf("\t\t Train Info \t\t\n");
    	printf("\nEnter the train number:\n");
    	scanf("%d",&(a.number));
    	printf("\nEnter the number of seats in the train:\n");
        scanf("%d",&(a.seats));
	printf("%d",a.seats);
	    error = pthread_create(&(tid[i]), NULL, &stationLoadTrain, (void*)&a);
        if (error != 0)
            printf("\nPlatform is not empty :[%s]", strerror(error));
        i++;
	    if(i==10)
	    	i=0;

    }
	if(c!=3)
	    goto x;
    for (int j=0;j<10;j++)
    pthread_join(tid[j], NULL);
    pthread_mutex_destroy(&lock);
    pthread_cond_destroy(&con);
    return 0;
}
